// Generated by CoffeeScript 1.9.3
(function() {
  var Movie, MovieList, MovieListView, View, app, re, removeCharacters,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  re = new RegExp(/[ \?]/g);

  removeCharacters = function(input) {
    console.log("Leerzeichen und Fragezeichen \nwerden aus " + input + " entfernt.");
    return input.replace(re, '');
  };

  View = (function() {
    function View() {}

    View.prototype.render = function() {
      return this.log("View render called class View");
    };

    View.prototype.log = function(value) {
      return console.log(value);
    };

    return View;

  })();

  Movie = (function() {
    function Movie(values) {
      var success;
      success = this.setAttributes(values);
      if (success) {
        this.id = removeCharacters(values.title + values.year);
      }
    }

    Movie.prototype.validate = function(values) {
      return true;
    };

    Movie.prototype.setAttributes = function(values) {
      if (this.validate(values)) {
        this.attributes = values;
        return true;
      }
      return false;
    };

    return Movie;

  })();

  MovieList = (function() {
    function MovieList() {
      this.storageName = 'demomoviesdatabaseCollection';
      this.fetch();
      this;
    }

    MovieList.prototype.newMovie = function(values, callback) {
      var checkExisting, elem, futureId;
      futureId = removeCharacters(values.title + values.year);
      checkExisting = this.getMovie(futureId);
      if ((checkExisting == null) || checkExisting.length >= 1) {
        if (typeof callback === "function") {
          callback();
        }
        return false;
      }
      elem = new Movie(values);
      this.collection.push(elem);
      this.save(callback);
      return true;
    };

    MovieList.prototype.removeMovie = function(ids, callback) {
      var movie;
      this.collection = (function() {
        var i, len, ref, results;
        ref = this.collection;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          movie = ref[i];
          if (movie.id !== ids) {
            results.push(movie);
          }
        }
        return results;
      }).call(this);
      return this.save(callback);
    };

    MovieList.prototype.getMovie = function(ids) {
      var movie, result;
      result = (function() {
        var i, len, ref, results;
        ref = this.collection;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          movie = ref[i];
          if (movie.id === ids) {
            results.push(movie);
          }
        }
        return results;
      }).call(this);
      return result;
    };

    MovieList.prototype.getCollection = function() {
      return this.collection;
    };

    MovieList.prototype.fetch = function(callback) {
      var temp;
      temp = localStorage[this.storageName];
      if (temp == null) {
        this.collection = [];
        this.newMovie({
          year: 2018,
          title: 'le movies',
          director: 'derpington',
          fsk: '18',
          runtime: '2011-2015'
        });
      } else {
        this.collection = JSON.parse(temp);
      }
      return typeof callback === "function" ? callback() : void 0;
    };

    MovieList.prototype.save = function(callback) {
      localStorage[this.storageName] = JSON.stringify(this.getCollection());
      return typeof callback === "function" ? callback() : void 0;
    };

    MovieList.prototype.updateMovie = function(id, attribut, value) {
      var movies;
      movies = this.getMovie(id);
      movies[0].attributes[attribut] = value;
      return movies[0].id = removeCharacters(movies[0].attributes.title + movies[0].attributes.year);
    };

    MovieList.prototype.sort = function(attribut, sorting) {
      var asc, desc;
      this.sorted = {
        attribut: attribut,
        sorting: sorting
      };
      asc = function(a, b) {
        if (a.attributes[attribut] < b.attributes[attribut]) {
          return -1;
        }
        if (a.attributes[attribut] > b.attributes[attribut]) {
          return 1;
        }
        return 0;
      };
      desc = function(a, b) {
        if (a.attributes[attribut] > b.attributes[attribut]) {
          return -1;
        }
        if (a.attributes[attribut] < b.attributes[attribut]) {
          return 1;
        }
        return 0;
      };
      if (sorting === "asc") {
        return this.collection = this.collection.sort(asc);
      } else {
        return this.collection = this.collection.sort(desc);
      }
    };

    return MovieList;

  })();

  MovieListView = (function(superClass) {
    extend(MovieListView, superClass);

    function MovieListView(MovieList) {
      this.render = bind(this.render, this);
      var dialogOptions;
      this.inputDirector = '#director';
      this.inputFsk = '#fsk';
      this.inputTitle = '#title';
      this.inputYear = '#year';
      this.inputRuntime = '#runtime';
      this.tbodyData = '#contentData';
      this.buttonSave = '#save-table';
      this.buttonCreate = '#create-movie';
      this.classNotSaved = '.editable-unsaved';
      this.aSortTitle = '#sortTitle';
      this.aSortDirector = '#sortDirector';
      this.aSortFsk = '#sortfsk';
      this.aSortYear = '#sortYear';
      this.aSortRuntime = '#sortRuntime';
      this.sorted = ["", ""];
      this.MovieList = MovieList;
      this.render();
      $(this.inputFsk).on('keydown', (function(_this) {
        return function(event) {
          if (event.keyCode === 13) {
            return _this.showDialogSave(_this.createMovie, event);
          }
        };
      })(this));
      $(this.buttonCreate).on('click', (function(_this) {
        return function(event) {
          return _this.showDialogSave(_this.createMovie, event);
        };
      })(this));
      $(this.buttonSave).on('click', (function(_this) {
        return function(event) {
          return _this.saveMovieList(event, _this.render);
        };
      })(this));
      $(this.aSortTitle + "," + this.aSortDirector + "," + this.aSortYear + "," + this.aSortRuntime + "," + this.aSortFsk).on('click', (function(_this) {
        return function(event) {
          return _this.showDialogSave(_this.sort, event);
        };
      })(this));
      dialogOptions = {
        autoOpen: false,
        show: "blind",
        hide: "blind",
        modal: true
      };
      $("#dialog-invalid-input").dialog(dialogOptions);
      $("#dialog-already-exist").dialog(dialogOptions);
      $("#dialog-eidtable-not-saved").dialog(dialogOptions);
      $.fn.editable.defaults.mode = 'inline';
      this;
    }

    MovieListView.prototype.render = function() {
      var movie, trString;
      this.log("render fired");
      trString = (function() {
        var i, len, ref, results;
        ref = this.MovieList.getCollection();
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          movie = ref[i];
          results.push(this.renderMovie(movie));
        }
        return results;
      }).call(this);
      $(this.tbodyData).empty();
      $(this.tbodyData).append(trString.join());
      this.addDeleteEvents();
      this.initXEditableFields();
      $("button").button();
      return this.renderSorting();
    };

    MovieListView.prototype.renderSorting = function() {
      var iconClass;
      if (this.sorted[0] !== "" && this.sorted[1] !== "") {
        $(".sort-asc,.sort-desc").each((function(_this) {
          return function(k, v) {
            v.setAttribute("class", "");
            return v.lastChild.setAttribute("class", "");
          };
        })(this));
        $(this.sorted[0]).attr("class", this.sorted[1]);
        iconClass = "ui-icon ui-icon-caret-1-";
        if (this.sorted[1] === "sort-asc") {
          iconClass = iconClass + "s";
        } else {
          iconClass = iconClass + "n";
        }
        return $(this.sorted[0] + ">span").attr("class", iconClass);
      }
    };

    MovieListView.prototype.renderMovie = function(movie) {
      var values;
      values = movie.attributes;
      return "<tr id='" + movie.id + "_row'>\n    <td><a href=\"#\" data-type=\"text\"  data-pk=\"" + movie.id + "\"  data-title=\"Enter username\" id=\"" + movie.id + "_title\">" + values.title + "</a></td>\n    <td><a href=\"#\" data-type=\"text\"  data-pk=\"" + movie.id + "\"  data-title=\"Enter username\" id=\"" + movie.id + "_director\">" + values.director + "</a></td>\n    <td><a href=\"#\" data-type=\"text\"  data-pk=\"" + movie.id + "\"  data-title=\"Enter username\" id=\"" + movie.id + "_year\">" + values.year + "</a></td>\n    <td><a href=\"#\" data-type=\"text\"  data-pk=\"" + movie.id + "\"  data-title=\"Enter username\" id=\"" + movie.id + "_runtime\">" + values.runtime + "</a></td>\n    <td><a href=\"#\" data-type=\"text\"  data-pk=\"" + movie.id + "\"   data-title=\"Enter username\" id=\"" + movie.id + "_fsk\">" + values.fsk + "</a></td>\n    <td><form>\n        <button  id='" + movie.id + "'  class='ui-button ui-corner-all ui-widget ui-button-icon-only ' >\n            <span class=\"ui-icon ui-icon-minus\"></span>\n        </button>\n    </form></td>\n</tr>";
    };

    MovieListView.prototype.initXEditableFields = function() {
      var i, len, movie, ref, results;
      $.fn.editable.defaults.mode = 'inline';
      ref = this.MovieList.getCollection();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        movie = ref[i];
        $("#" + movie.id + "_title").editable();
        $("#" + movie.id + "_director").editable();
        $("#" + movie.id + "_year").editable();
        $("#" + movie.id + "_runtime").editable();
        results.push($("#" + movie.id + "_fsk").editable());
      }
      return results;
    };

    MovieListView.prototype.addDeleteEvents = function() {
      var i, len, movie, ref, results;
      ref = this.MovieList.getCollection();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        movie = ref[i];
        results.push($("#" + movie.id).on('click', (function(_this) {
          return function(event) {
            return _this.deleteMovie(event, _this.render);
          };
        })(this)));
      }
      return results;
    };

    MovieListView.prototype.checkInputFields = function(values) {
      var isNotEmpty, k, v;
      isNotEmpty = true;
      for (k in values) {
        v = values[k];
        if (!v) {
          isNotEmpty = false;
        }
      }
      return isNotEmpty;
    };

    MovieListView.prototype.readInputFields = function() {
      var values;
      values = {};
      values.title = $(this.inputTitle).val();
      values.director = $(this.inputDirector).val();
      values.year = $(this.inputYear).val();
      values.runtime = $(this.inputRuntime).val();
      values.fsk = $(this.inputFsk).val();
      return values;
    };

    MovieListView.prototype.createMovie = function(event, callback) {
      var created, valid, values;
      values = this.readInputFields();
      valid = this.checkInputFields(values);
      if (valid) {
        created = this.MovieList.newMovie(values, callback);
        if (!created) {
          $("#dialog-already-exist").dialog("open");
        }
      } else {
        $("#dialog-invalid-input").dialog("open");
      }
      return this;
    };

    MovieListView.prototype.deleteMovie = function(event, callback) {
      this.MovieList.removeMovie(event.currentTarget.id, callback);
      return this;
    };

    MovieListView.prototype.saveMovieList = function(event, callback) {
      $(this.classNotSaved).each((function(_this) {
        return function(k, v) {
          var newV;
          newV = v.id.split("_");
          return _this.MovieList.updateMovie(newV[0], newV[1], v.innerHTML);
        };
      })(this));
      this.MovieList.save(callback);
      return this;
    };

    MovieListView.prototype.sort = function(event, callback) {
      var sorting, val;
      sorting = "asc";
      val = event.currentTarget.id.replace("sort", "");
      val = val.toLowerCase();
      if (this.sorted[0] === '#' + event.currentTarget.id) {
        if (this.sorted[1] === "sort-" + sorting) {
          sorting = "desc";
        }
      }
      this.MovieList.sort(val, sorting);
      this.sorted = ['#' + event.currentTarget.id, "sort-" + sorting];
      if (typeof callback === "function") {
        callback();
      }
      return this;
    };

    MovieListView.prototype.isDataSaved = function() {
      return $('.editable-unsaved').length <= 0;
    };

    MovieListView.prototype.showDialogSave = function(arg, event) {
      var dynamicButton;
      this.arg = arg;
      if (!this.isDataSaved()) {
        dynamicButton = {
          "Save and continue": (function(_this) {
            return function() {
              _this.saveMovieList(event);
              _this.arg(event, _this.render);
              return $("#dialog-eidtable-not-saved").dialog("close");
            };
          })(this),
          "No Save and continue": (function(_this) {
            return function() {
              _this.arg(event, _this.render);
              return $("#dialog-eidtable-not-saved").dialog("close");
            };
          })(this)
        };
        $("#dialog-eidtable-not-saved").dialog("option", "buttons", dynamicButton);
        return $("#dialog-eidtable-not-saved").dialog("open");
      } else {
        return this.arg(event, this.render);
      }
    };

    return MovieListView;

  })(View);

  MovieList = new MovieList();

  app = new MovieListView(MovieList);

}).call(this);
